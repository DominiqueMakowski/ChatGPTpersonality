print(i)
print(x)
cat(df$Output[i])
}
data[i, ] <- v
}
max(as.numeric(x))
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
for(i in 1:nrow(df)) {
x <- ans[[i]][,1]
if(length(x) == 0) {
v <- rep(NA, 24)  # In case there is no answer
} else if(i %in% c(7, 8, 10, 14, 16, 21, 25, 26, 31, 34)) {
v <- rep(NA, 24)  # Didn't answered
} else if(i %in% c(17)) { # Manual cases -------
v <- rep(NA, 24)
v[c(9, 10, 11, 14)] <- c(6, 8, 7, 8)
} else if(i %in% c(20)) {
v <- rep(NA, 24)
v[c(3, 9, 10, 11, 14, 15, 19, 22)] <- c(8, 2, 7, 4, 8, 7, 6, 5)
} else if(i %in% c(22)) {
v <- rep(NA, 24)
v[1:length(x)] <- as.numeric(x)
} else if(i %in% c(27)) {
v <- as.numeric(x[3:length(x)])
} else if(i %in% c(30)) {
v <- rep(NA, 24)
v[c(10, 14)] <- c(8, 6)
} else if(length(x) == 24 && (max(as.numeric(x, na.rm=TRUE)) < 11)) {
v <- as.numeric(x, na.rm=TRUE)  # In case there is 24 answers
} else {
print("==========")
print(i)
print(x)
cat(df$Output[i])
}
data[i, ] <- v
}
length(x) == 24
(max(as.numeric(x, na.rm=TRUE)) < 11)
as.numeric(x, na.rm=TRUE)
max(as.numeric(x, na.rm=TRUE))
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
for(i in 1:nrow(df)) {
x <- ans[[i]][,1]
if(length(x) == 0) {
v <- rep(NA, 24)  # In case there is no answer
} else if(i %in% c(7, 8, 10, 14, 16, 21, 25, 26, 31, 34)) {
v <- rep(NA, 24)  # Didn't answered
} else if(i %in% c(17)) { # Manual cases -------
v <- rep(NA, 24)
v[c(9, 10, 11, 14)] <- c(6, 8, 7, 8)
} else if(i %in% c(20)) {
v <- rep(NA, 24)
v[c(3, 9, 10, 11, 14, 15, 19, 22)] <- c(8, 2, 7, 4, 8, 7, 6, 5)
} else if(i %in% c(22)) {
v <- rep(NA, 24)
v[1:length(x)] <- as.numeric(x)
} else if(i %in% c(27)) {
v <- as.numeric(x[3:length(x)])
} else if(i %in% c(30)) {
v <- rep(NA, 24)
v[c(10, 14)] <- c(8, 6)
} else if(length(x) == 24 && (max(as.numeric(x), na.rm=TRUE) < 11)) {
v <- as.numeric(x)  # In case there is 24 answers
} else {
print("==========")
print(i)
print(x)
cat(df$Output[i])
}
data[i, ] <- v
}
data
data <- as.data.frame(data) |>
setNames(c("Extraversion_1",
"Agreeableness_2",
"Conscientiousness_3",
"Neuroticism_4",
"Openness_5",
"HonestyHumility_6_R",
"Extraversion_7_R",
"Agreeableness_8_R",
"Openness_9_R",
"Conscientiousness_10",
"Conscientiousness_11_R",
"HonestyHumility_12_R",
"Openness_13_R",
"Agreeableness_14",
"Neuroticism_15_R",
"Neuroticism_16",
"Neuroticism_17_R",
"HonestyHumility_18_R",
"Extraversion_19_R",
"Agreeableness_20_R",
"Openness_21_R",
"Conscientiousness_22_R",
"Extraversion_23",
"HonestyHumility_24_R")) |>
datawizard::change_scale(to = c(0, 1), range = c(0, 10))
data[grepl("_R", names(data))] <- 1 - data[grepl("_R", names(data))]
names(data) <- str_remove_all(names(data), "_R")
items <- datawizard::data_to_long(data, names_to = "Item", values_to = "Answer", rows_to = "Index") |>
mutate(Dimension = str_split(Item, "_", n=2, simplify=TRUE)[, 1])
dim <- items |>
group_by(Index, Dimension) |>
summarize(Answer = mean(Answer, na.rm = TRUE))
dim |>
group_by(Dimension) |>
summarize(CI_low = bayestestR::eti(Answer, na.rm = TRUE)$CI_low,
CI_high = bayestestR::eti(Answer, na.rm = TRUE)$CI_high,
Answer = mean(Answer, na.rm = TRUE)) |>
# rbind(data.frame(Dimension = " ", CI_low = NA, CI_high = NA, Answer = NA)) |>
mutate(Dimension_num = as.numeric(as.factor(Dimension))) |>
ggplot(aes(x = Dimension_num, y = Answer)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high), alpha = 0.1) +
geom_line(aes(color=as.factor(Dimension), group=1), linewidth=1) +
# geom_point(aes(color=as.factor(Dimension)), size=5) +
geom_pointrange(aes(color=as.factor(Dimension), ymin=CI_low, ymax=CI_high), size=2, linewidth=2) +
scale_y_continuous(labels=scales::percent, expand = c(0, 0)) +
# scale_x_continuous(breaks = 1:7,labels = c(" ", unique(dim$Dimension))) +
scale_x_continuous(breaks = 1:6,labels = unique(dim$Dimension)) +
theme_abyss() +
coord_cartesian(ylim = c(0, 1)) +
ggplot2::labs(y = "Personality", x = "Dimension", title = "ChatGPT's Personality") +
scale_color_material_d(palette="rainbow", guide="none") +
theme(plot.title = element_text(face = "bold", hjust=0.5, size=20),
axis.title.x = element_blank(),
axis.title.y = element_blank())
items |>
rbind(mutate(dim, Item = Dimension)) |>
ggplot(aes(x = Answer, fill = Dimension)) +
geom_histogram() +
facet_wrap(Item~Dimension, ncol=5)
library(tidyverse)
library(easystats)
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
i <- 36
data <- matrix(nrow=nrow(df), ncol=24)
x <- ans[[i]][,1]
x
1:19
1:19:2
eq(1, 19, 2)
seq(1, 19, 2)
x[seq(1, 19, 2)]
v[1:19] <- x[seq(1, 19, 2)]
x[seq(1, length(x), 2)]
v[1:19] <- x[seq(1, length(x), 2)]
library(tidyverse)
library(easystats)
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
i <- 40
x <- ans[[i]][,1]
x
x[seq(1, length(x), 2)]
# Chunk 1
library(tidyverse)
library(easystats)
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
for(i in 1:nrow(df)) {
x <- ans[[i]][,1]
if(length(x) == 0) {
v <- rep(NA, 24)  # In case there is no answer
} else if(i %in% c(7, 8, 10, 14, 16, 21, 25, 26, 31, 34)) {
v <- rep(NA, 24)  # Didn't answered
} else if(i %in% c(17)) { # Manual cases -------
v <- rep(NA, 24)
v[c(9, 10, 11, 14)] <- c(6, 8, 7, 8)
} else if(i %in% c(20)) {
v <- rep(NA, 24)
v[c(3, 9, 10, 11, 14, 15, 19, 22)] <- c(8, 2, 7, 4, 8, 7, 6, 5)
} else if(i %in% c(22)) {
v <- rep(NA, 24)
v[1:length(x)] <- as.numeric(x)
} else if(i %in% c(27)) {
v <- as.numeric(x[3:length(x)])
} else if(i %in% c(30)) {
v <- rep(NA, 24)
v[c(10, 14)] <- c(8, 6)
} else if(i %in% c(36)) {
v <- rep(NA, 24)
v[1:19] <- x[seq(1, length(x), 2)]
} else if(i %in% c(40)) {
v <- x[seq(1, length(x), 2)]s
# Chunk 1
library(tidyverse)
library(easystats)
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
for(i in 1:nrow(df)) {
x <- ans[[i]][,1]
if(length(x) == 0) {
v <- rep(NA, 24)  # In case there is no answer
} else if(i %in% c(7, 8, 10, 14, 16, 21, 25, 26, 31, 34)) {
v <- rep(NA, 24)  # Didn't answered
} else if(i %in% c(17)) { # Manual cases -------
v <- rep(NA, 24)
v[c(9, 10, 11, 14)] <- c(6, 8, 7, 8)
} else if(i %in% c(20)) {
v <- rep(NA, 24)
v[c(3, 9, 10, 11, 14, 15, 19, 22)] <- c(8, 2, 7, 4, 8, 7, 6, 5)
} else if(i %in% c(22)) {
v <- rep(NA, 24)
v[1:length(x)] <- as.numeric(x)
} else if(i %in% c(27)) {
v <- as.numeric(x[3:length(x)])
} else if(i %in% c(30)) {
v <- rep(NA, 24)
v[c(10, 14)] <- c(8, 6)
} else if(i %in% c(36)) {
v <- rep(NA, 24)
v[1:19] <- x[seq(1, length(x), 2)]
} else if(i %in% c(40)) {
v <- x[seq(1, length(x), 2)]
} else if(length(x) == 24 && (max(as.numeric(x), na.rm=TRUE) < 11)) {
v <- as.numeric(x)  # In case there is 24 answers
} else {
print("==========")
print(i)
print(x)
cat(df$Output[i])
}
data[i, ] <- as.numeric(v)
}
data <- as.data.frame(data) |>
setNames(c("Extraversion_1",
"Agreeableness_2",
"Conscientiousness_3",
"Neuroticism_4",
"Openness_5",
"HonestyHumility_6_R",
"Extraversion_7_R",
"Agreeableness_8_R",
"Openness_9_R",
"Conscientiousness_10",
"Conscientiousness_11_R",
"HonestyHumility_12_R",
"Openness_13_R",
"Agreeableness_14",
"Neuroticism_15_R",
"Neuroticism_16",
"Neuroticism_17_R",
"HonestyHumility_18_R",
"Extraversion_19_R",
"Agreeableness_20_R",
"Openness_21_R",
"Conscientiousness_22_R",
"Extraversion_23",
"HonestyHumility_24_R")) |>
datawizard::change_scale(to = c(0, 1), range = c(0, 10))
data[grepl("_R", names(data))] <- 1 - data[grepl("_R", names(data))]
names(data) <- str_remove_all(names(data), "_R")
items <- datawizard::data_to_long(data, names_to = "Item", values_to = "Answer", rows_to = "Index") |>
mutate(Dimension = str_split(Item, "_", n=2, simplify=TRUE)[, 1])
# Chunk 2
dim <- items |>
group_by(Index, Dimension) |>
summarize(Answer = mean(Answer, na.rm = TRUE))
dim |>
group_by(Dimension) |>
summarize(CI_low = bayestestR::eti(Answer, na.rm = TRUE)$CI_low,
CI_high = bayestestR::eti(Answer, na.rm = TRUE)$CI_high,
Answer = mean(Answer, na.rm = TRUE)) |>
# rbind(data.frame(Dimension = " ", CI_low = NA, CI_high = NA, Answer = NA)) |>
mutate(Dimension_num = as.numeric(as.factor(Dimension))) |>
ggplot(aes(x = Dimension_num, y = Answer)) +
geom_ribbon(aes(ymin=CI_low, ymax=CI_high), alpha = 0.1) +
geom_line(aes(color=as.factor(Dimension), group=1), linewidth=1) +
# geom_point(aes(color=as.factor(Dimension)), size=5) +
geom_pointrange(aes(color=as.factor(Dimension), ymin=CI_low, ymax=CI_high), size=2, linewidth=2) +
scale_y_continuous(labels=scales::percent, expand = c(0, 0)) +
# scale_x_continuous(breaks = 1:7,labels = c(" ", unique(dim$Dimension))) +
scale_x_continuous(breaks = 1:6,labels = unique(dim$Dimension)) +
theme_abyss() +
coord_cartesian(ylim = c(0, 1)) +
ggplot2::labs(y = "Personality", x = "Dimension", title = "ChatGPT's Personality") +
scale_color_material_d(palette="rainbow", guide="none") +
theme(plot.title = element_text(face = "bold", hjust=0.5, size=20),
axis.title.x = element_blank(),
axis.title.y = element_blank())
# see::coord_radar(ylim = c(0, 1))
items |>
rbind(mutate(dim, Item = Dimension)) |>
ggplot(aes(x = Answer, fill = Dimension)) +
geom_histogram() +
facet_wrap(Item~Dimension, ncol=5)
items
items
items |>
group_by(Item) |>
summarize(Proportion = sum(is.na(Answer)))
items |>
group_by(Item) |>
summarize(Proportion = sum(is.na(Answer)) / n())
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n())
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, fill=Dimension)) +
geom_bar(stat = "identity")
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity")
items |>
rbind(mutate(dim, Item = Dimension)) |>
ggplot(aes(x = Answer, fill = Dimension)) +
geom_histogram() +
scale_color_material_d(palette="rainbow", guide="none") +
facet_wrap(Item~Dimension, ncol=5)
items |>
rbind(mutate(dim, Item = Dimension)) |>
ggplot(aes(x = Answer, fill = Dimension)) +
geom_histogram() +
scale_fill_material_d(palette="rainbow", guide="none") +
facet_wrap(Item~Dimension, ncol=5)
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none")
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=0))
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=-1))
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
scale_y_continuous(labels=scales::percent, expand = c(0, 0))
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
scale_y_continuous(labels=scales::percent, expand = c(0, 0)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
see::theme_modern() +
theme(plot.title = element_text(face = "bold", hjust=0.5, size=20),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
items |>
group_by(Dimension, Item) |>
summarize(Proportion = sum(is.na(Answer)) / n()) |>
ggplot(aes(x = Item, y = Proportion, fill=Dimension)) +
geom_bar(stat = "identity") +
scale_fill_material_d(palette="rainbow", guide="none") +
scale_y_continuous(labels=scales::percent, expand = c(0, 0)) +
labs(y = "Proportion of missing answers", title = "How often ChatGPT does not answer?") +
see::theme_modern() +
theme(plot.title = element_text(face = "bold", hjust=0.5, size=20),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust=1))
setwd("C:/Dropbox/PERSO/github/ChatGPTpersonality")
# Chunk 1
library(tidyverse)
library(easystats)
df <- readxl::read_excel("data.xlsx")
# Preprocess answers
ans <- stringr::str_match_all(df$Output, "N\\/A|[0-9]+")  # Extract numeric
data <- matrix(nrow=nrow(df), ncol=24)
for(i in 1:nrow(df)) {
x <- ans[[i]][,1]
if(length(x) == 0) {
v <- rep(NA, 24)  # In case there is no answer
} else if(i %in% c(7, 8, 10, 14, 16, 21, 25, 26, 31, 34)) {
v <- rep(NA, 24)  # Didn't answered
} else if(i %in% c(17)) { # Manual cases -------
v <- rep(NA, 24)
v[c(9, 10, 11, 14)] <- c(6, 8, 7, 8)
} else if(i %in% c(20)) {
v <- rep(NA, 24)
v[c(3, 9, 10, 11, 14, 15, 19, 22)] <- c(8, 2, 7, 4, 8, 7, 6, 5)
} else if(i %in% c(22)) {
v <- rep(NA, 24)
v[1:length(x)] <- as.numeric(x)
} else if(i %in% c(27)) {
v <- as.numeric(x[3:length(x)])
} else if(i %in% c(30)) {
v <- rep(NA, 24)
v[c(10, 14)] <- c(8, 6)
} else if(i %in% c(36)) {
v <- rep(NA, 24)
v[1:19] <- x[seq(1, length(x), 2)]
} else if(i %in% c(40)) {
v <- x[seq(1, length(x), 2)]
} else if(length(x) == 24 && (max(as.numeric(x), na.rm=TRUE) < 11)) {
v <- as.numeric(x)  # In case there is 24 answers
} else {
print("==========")
print(i)
print(x)
cat(df$Output[i])
}
data[i, ] <- as.numeric(v)
}
data <- as.data.frame(data) |>
setNames(c("Extraversion_1",
"Agreeableness_2",
"Conscientiousness_3",
"Neuroticism_4",
"Openness_5",
"HonestyHumility_6_R",
"Extraversion_7_R",
"Agreeableness_8_R",
"Openness_9_R",
"Conscientiousness_10",
"Conscientiousness_11_R",
"HonestyHumility_12_R",
"Openness_13_R",
"Agreeableness_14",
"Neuroticism_15_R",
"Neuroticism_16",
"Neuroticism_17_R",
"HonestyHumility_18_R",
"Extraversion_19_R",
"Agreeableness_20_R",
"Openness_21_R",
"Conscientiousness_22_R",
"Extraversion_23",
"HonestyHumility_24_R")) |>
datawizard::change_scale(to = c(0, 1), range = c(0, 10))
data[grepl("_R", names(data))] <- 1 - data[grepl("_R", names(data))]
names(data) <- str_remove_all(names(data), "_R")
items <- datawizard::data_to_long(data, names_to = "Item", values_to = "Answer", rows_to = "Index") |>
mutate(Dimension = str_split(Item, "_", n=2, simplify=TRUE)[, 1])
df$Output
knitr::kable(df$Output)
knitr::kable(df["Output"])
names(ddf)
names(df)
knitr::kable(df[c("Attempt", "Output")])
df$Output
knitr::kable(df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, "\\\r")))
df$Output[1]
df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\\\r")))
df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\\\r")))
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\\\r")))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\r")))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\\\r")))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\\\r")))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, fixed("\r")))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, "\r"))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove(Output, "\\\r"))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove_all(Output, "\\\r"))
x$Output[1]
x <- df[c("Attempt", "Output")] |>
mutate(Output = str_remove_all(Output, "\\\r"))
x$Output[1]
